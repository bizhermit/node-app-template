@use "../../../../styles/mixins" as mixins;
@use "../../../../styles/var" as var;

@layer base {

  .main {
    &[data-disabled="false"] {
      &:focus {
        @include mixins.focusOutline(var(--s-color, var(--c-border)));
      }
    }

    &[data-editable="true"] {
      .handle {
        @include mixins.crossHover {
          &::before {
            @include mixins.buttonHoverAnimation(var(--s-color, var(--c-border)));
          }

          &:active {
            &::before {
              @include mixins.buttonHoverActive;
            }
          }
        }

      }

      .bar {
        background: var(--c-input);
      }
    }
  }

  .wrap {
    box-sizing: border-box;
    position: relative;
    height: var(--cs-m);
    min-width: 0;
    flex: 1;
  }

  .rail {
    box-sizing: border-box;
    position: relative;
    overflow: visible;
    width: calc(100% - var(--cs-m));
    height: 100%;
  }

  .handle {
    box-sizing: border-box;
    position: absolute;
    top: 0;
    height: var(--cs-m);
    width: var(--cs-m);
    user-select: none;
    border-radius: 9999px;

    &::before {
      box-sizing: border-box;
      position: absolute;
      content: "";
      border-radius: 9999px;
      top: 15%;
      left: 15%;
      height: 70%;
      width: 70%;
      border: #{var.$inputBorderWidth} solid var(--s-color, var(--c-border));
      background: var(--c-input);
    }
  }

  .bar {
    box-sizing: border-box;
    position: absolute;
    height: calc(var(--cs-m) / 4);
    width: calc(100% - var(--cs-m));
    border: #{var.$inputBorderWidth} solid var(--s-color, var(--c-border));
    top: calc(50% - var(--cs-m) / 8);
    left: calc(var(--cs-m) / 2);
    border-radius: 9999px;
    overflow: hidden;
  }

  .rate {
    box-sizing: border-box;
    height: 100%;
    background-color: var(--s-color, var(--c-main));
  }

}