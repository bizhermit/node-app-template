@use "../../styles/var" as var;
@use "../../styles/mixins" as mixins;

$borderWidth: 0.2rem;
$hTransitionTime: 0.8s;
$vTransitionTime: 0.5s;
$tabFlow: "normal"; // normal/flow

@layer base {

  .wrap {
    box-sizing: border-box;
    display: flex;
    justify-content: stretch;
    align-items: stretch;
    flex-wrap: nowrap;
    min-height: 0;
    min-width: 0;

    &[data-pos="top"] {
      flex-direction: column;

      >.header {
        >.tab {
          border-top: #{$borderWidth} solid var(--c-border);
          border-left: #{$borderWidth} solid var(--c-border);
          border-right: #{$borderWidth} solid var(--c-border);
          border-top-left-radius: var(--radius);
          border-top-right-radius: var(--radius);
        }
      }

      >.divider {
        margin-top: -0.5px;
        height: #{$borderWidth};
      }
    }

    &[data-pos="bottom"] {
      flex-direction: column-reverse;

      >.header {
        >.tab {
          border-bottom: #{$borderWidth} solid var(--c-border);
          border-left: #{$borderWidth} solid var(--c-border);
          border-right: #{$borderWidth} solid var(--c-border);
          border-bottom-left-radius: var(--radius);
          border-bottom-right-radius: var(--radius);
        }
      }

      >.divider {
        margin-bottom: -0.5px;
        height: #{$borderWidth};
      }
    }

    &:is([data-pos="top"], [data-pos="bottom"]) {
      >.header {
        flex-direction: row;


        .label {
          min-width: calc(var(--cs-m) * 3);
          padding: calc(var(--pt-t) + #{$borderWidth}) #{var.$textPadding} 0 #{var.$textPadding};
        }
      }
    }

    &[data-pos="left"] {
      flex-direction: row;

      >.header {
        >.tab {
          border-top: #{$borderWidth} solid var(--c-border);
          border-bottom: #{$borderWidth} solid var(--c-border);
          border-left: #{$borderWidth} solid var(--c-border);
          border-top-left-radius: var(--radius);
          border-bottom-left-radius: var(--radius);
        }
      }

      >.divider {
        margin-left: -0.5px;
        width: #{$borderWidth};
      }
    }

    &[data-pos="right"] {
      flex-direction: row-reverse;

      >.header {
        >.tab {
          border-top: #{$borderWidth} solid var(--c-border);
          border-bottom: #{$borderWidth} solid var(--c-border);
          border-right: #{$borderWidth} solid var(--c-border);
          border-top-right-radius: var(--radius);
          border-bottom-right-radius: var(--radius);
        }
      }

      >.divider {
        margin-right: -0.5px;
        width: #{$borderWidth};
      }
    }

    &:is([data-pos="left"], [data-pos="right"]) {
      >.header {
        @if $tabFlow =="flow" {
          flex-direction: row;
          writing-mode: vertical-rl;

          .label {
            padding: #{var.$textPadding} 0.4rem #{var.$textPadding} 0;
          }
        }

        @else {
          flex-direction: column;

          .label {
            min-width: calc(var(--cs-m) * 2.5);
            padding: var(--pt-t) #{var.$textPadding} 0 #{var.$textPadding};
          }
        }
      }
    }
  }

  .header {
    box-sizing: border-box;
    flex: none;
    min-width: var(--cs-m);
    min-height: var(--cs-m);
    display: flex;
    justify-content: stretch;
    align-items: stretch;
    flex-wrap: nowrap;
    gap: var(--b-s);

    @include mixins.crossHover {}

    &[data-fill="true"] {
      >.tab {
        flex: 1 1 0rem;
      }
    }
  }

  .tab {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    user-select: none;
    min-height: var(--cs-m);
    min-width: var(--cs-m);
    transition: background-color #{var.$transitionTime},
    color #{var.$transitionTime},
    border-color #{var.$transitionTime};

    &[data-selected="true"] {
      border-color: var(--s-color, var(--c-main)) !important;
      background: var(--s-color, var(--c-main));
      color: var(--s-color_, var(--c-main_));
    }

    &:not([data-selected="true"]) {
      cursor: pointer;

      @include mixins.crossHover {
        @include mixins.buttonHoverAnimation(var(--c-border));

        &:active {
          @include mixins.buttonHoverActive;
        }
      }
    }
  }

  .divider {
    background-color: var(--s-color, var(--c-main));
    z-index: 10;
  }

  .body {
    --s-color: initial;
    --s-color_: initial;

    box-sizing: border-box;
    position: relative;
    min-width: 0;
    min-height: 0;
    flex: 1 1 auto;
    overflow: hidden;
  }

  .content {
    box-sizing: border-box;
    width: 100%;
    min-height: 100%;
    height: 100%;
    flex: none;
    z-index: 0;
    opacity: 0;
    overflow: auto;
    background: var(--c-base);
    transition: opacity #{var.$transitionTime};

    &[data-selected="true"] {
      z-index: 1;
      position: relative;
      opacity: 1;
    }

    &:not([data-selected="true"]) {
      position: absolute;
      top: 0;
      left: 0;
      max-height: 100% !important;
      pointer-events: none;
      overflow: hidden;
    }
  }

  .label {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    gap: var(--b-s);
  }

}