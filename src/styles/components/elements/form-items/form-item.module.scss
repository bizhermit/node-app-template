$tagHeight: var(--tag-height, calc(var(--font-size) * 1.5));

.wrap {
  box-sizing: border-box;
  position: relative;
  display: inline-flex;
  flex-flow: column nowrap;
  justify-content: flex-start;
  align-items: stretch;
  overflow: visible;

  &[data-tagpad="true"] {
    padding-top: $tagHeight;
  }

  &:focus-within,
  &[data-has="true"] {
    >.tag {
      &[data-pos="placeholder"] {
        top: 0;
        left: 0;
        padding-top: 0;
        height: $tagHeight;
        opacity: 1;
      }
    }
  }

  &[data-round="true"] {
    >.main {
      &::before {
        border-radius: 9999px !important;
      }

      >.input {
        padding-left: calc(var(--size) / 2);
        padding-right: calc(var(--size) / 2);
      }
    }
  }
}

.tag {
  box-sizing: border-box;
  position: relative;
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: center;
  max-width: 100%;
  text-overflow: clip;
  height: $tagHeight;
  
  &[data-pos="placeholder"] {
    position: absolute;
    top: calc($tagHeight);
    padding-top: calc(var(--padding-top-text) + 0.1rem);
    height: var(--size);
    left: 1rem;
    z-index: 1;
    transition: left 0.5s, top 0.5s, height 0.5s, padding-top 0.5s, opacity 0.5s;
    opacity: 0.6;
  }
}

.main {
  box-sizing: border-box;
  position: relative;
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: center;
  border-color: var(--bgc-border);

  &[data-editable="true"] {
    &[data-field="true"] {
      color: var(--fgc-input);

      &::before {
        box-sizing: border-box;
        position: absolute;
        content: "";
        background: var(--bgc-input);
        height: 100%;
        width: 100%;
        border-width: 0.1rem;
        border-style: solid;
        border-color: inherit;
        border-radius: var(--radius);
        z-index: 0;
        transition: background 0.2s;
      }

      &[data-error="true"] {
        color: var(--fgc-error);

        &::before {
          background: var(--bgc-error);
        }
      }
    }

    &[data-clickable="true"] {
      cursor: pointer;
      user-select: none;
    }
  }

  &[data-disabled="true"] {
    opacity: 0.6;
  }
}

@mixin input($flex: 1, $pad: true) {
  box-sizing: border-box;
  border: none;
  background: transparent;
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  z-index: 1;
  resize: none;
  height: var(--size);
  min-width: var(--size);
  flex: $flex;

  @if $pad {
    padding: calc(var(--padding-top-text) + 0.1rem) 1rem 0 1rem;
  }
}

.input {
  @include input;
}

.error {
  box-sizing: border-box;
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: center;
  min-height: calc(var(--font-size) * 1.5);
  font-size: calc(var(--font-size) * 0.85);

  &[data-mode="tooltip"] {
    position: absolute;
    padding: calc(.5rem + var(--padding-top-text)) 1.5rem .5rem 1.5rem;
    white-space: nowrap;
    background: var(--bgc-error);
    color: var(--fgc-error);
    opacity: 0.9;
    width: fit-content;
    border-radius: var(--radius);
    box-shadow: 0 .1rem .8rem 0 var(--bgc-shadow);
  }

  &[data-mode="bottom"] {
    position: relative;
    padding: var(--padding-top-text) .5rem 0 .5rem;
    overflow-wrap: break-word;
    max-width: 100%;
  }
}