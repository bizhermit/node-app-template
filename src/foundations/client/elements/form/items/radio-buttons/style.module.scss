@use "../../../../styles/mixins" as mixins;
@use "../../../../styles/var" as var;

@layer base {

  .main {
    &[data-disabled="false"] {
      >.item {
        &:focus {
          @include mixins.outline;
        }
      }
    }

    &[data-editable="true"] {
      >.item {
        cursor: pointer;
        user-select: none;

        >.box {
          &::before {
            background: var(--c-input);
          }
        }

        @include mixins.crossHover {}

        &:not([data-outline="true"]) {
          outline-color: var(--c-main);

          &[data-state="active"] {
            >.box {
              &::before {
                @include mixins.hoverTransition;
              }
            }

            @include mixins.crossHover {
              >.box {
                &::before {
                  @include mixins.hover;
                }
              }

              &:active {
                >.box {
                  &::before {
                    @include mixins.hoverActive;
                  }
                }
              }
            }
          }
        }

        &[data-outline="true"] {
          outline-offset: -0.1rem;

          &[data-state="active"] {
            @include mixins.hoverTransition;

            @include mixins.crossHover {
              @include mixins.hover;

              &:active {
                @include mixins.hoverActive;
              }
            }
          }
        }

        &[data-appearance="button"] {
          &[data-state="active"] {
            @include mixins.crossHover {
              @include mixins.hover;

              &:active {
                @include mixins.hoverActive;
              }
            }
          }

          >.content {
            background: var(--c-input);
          }
        }

        &[data-state="readonly"],
        &[data-state="disabled"] {
          >.box {
            &::before {
              background: none !important;
            }
          }

          &[data-appearance="button"] {
            >.content {
              background: none !important;
            }
          }
        }

        &[data-state="disabled"] {
          opacity: #{var.$disabledOpacity};
        }

        &[data-state="hidden"] {
          display: none;
        }
      }

      &[data-error="true"] {
        >.item {
          >.box {
            &::before {
              background: var(--c-error);
            }
          }
        }
      }
    }

    &[data-direction="horizontal"] {
      flex-wrap: wrap;

      >.item {
        height: var(--cs-m);

        &[data-appearance="button"] {
          &:first-child {
            >.content {
              border-top-left-radius: var(--radius);
              border-bottom-left-radius: var(--radius);
            }
          }

          &:last-child {
            >.content {
              border-top-right-radius: var(--radius);
              border-bottom-right-radius: var(--radius);
            }
          }

          >.content {
            >.label {
              padding-left: #{var.$textPaddingBold};
              padding-right: #{var.$textPaddingBold};
            }
          }
        }

        >.content {
          >.label {
            padding-right: #{var.$textPaddingThin};
          }
        }
      }
    }

    &[data-direction="vertical"] {
      flex-direction: column;
      align-items: stretch;

      >.item {
        &[data-appearance="button"] {
          flex: 1 0 0rem;

          &:first-child {
            >.content {
              border-top-left-radius: var(--radius);
              border-top-right-radius: var(--radius);
            }
          }

          &:last-child {
            >.content {
              border-bottom-left-radius: var(--radius);
              border-bottom-right-radius: var(--radius);
            }
          }

          >.content {
            >.label {
              padding-left: #{var.$textPaddingBold};
              padding-right: #{var.$textPaddingBold};
            }
          }
        }

        >.content {
          >.label {
            padding-right: #{var.$textPadding};
          }
        }
      }
    }

    &[data-outline="true"] {
      gap: var(--b-s);
    }
  }

  @include mixins.hoverAnimation;

  .item {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    min-width: var(--cs-m);
    min-height: var(--cs-m);
    z-index: 0;
    flex: 1 0 auto;
    border-radius: var(--radius);

    &[data-selected="true"],
    &:focus {
      z-index: 1;
    }

    &[data-appearance="button"] {
      >.content {
        border-width: #{var.$inputBorderWidth};
        border-style: solid;
        border-color: inherit;
        justify-content: center;
      }
    }

    &[data-appearance="point"] {
      >.box {
        &::before {
          box-sizing: border-box;
          position: absolute;
          content: "";
          border-width: #{var.$inputBorderWidth};
          border-style: solid;
          border-color: inherit;
          border-radius: 9999px;
          height: 50%;
          width: 50%;
          top: 25%;
          left: 25%;
        }

        >.check {
          height: calc(var(--cs-m) * 0.3);
          width: calc(var(--cs-m) * 0.3);
          top: 35%;
          left: 35%;
        }
      }

      >.content {
        padding-right: #{var.$textPadding};
      }
    }

    &[data-appearance="check"],
    &[data-appearance="check-outline"] {
      >.box {
        &::before {
          box-sizing: border-box;
          position: absolute;
          content: "";
          border-width: #{var.$inputBorderWidth};
          border-style: solid;
          border-color: inherit;
          border-radius: 9999px;
          height: 70%;
          width: 70%;
          top: 15%;
          left: 15%;
        }

        >.check {
          height: calc(var(--cs-m) * 0.7);
          width: calc(var(--cs-m) * 0.7);
          top: 15%;
          left: 15%;

          &::before {
            box-sizing: border-box;
            position: absolute;
            content: "";
            top: 14%;
            left: 32%;
            width: 37%;
            height: 60%;
            border-bottom-width: 0.25rem;
            border-bottom-style: solid;
            border-bottom-color: inherit;
            border-right-width: 0.25rem;
            border-right-style: solid;
            border-right-color: inherit;
            transform: rotate(45deg);
          }
        }
      }

      >.content {
        padding-right: #{var.$textPadding};
        
        >.label {
          padding-left: #{var.$textPaddingThin};
        }
      }
    }

    &[data-outline="true"] {
      border: #{var.$inputBorderWidth} solid var(--c-border);
      border-radius: 9999px;
    }
  }

  .box {
    box-sizing: border-box;
    position: relative;
    height: var(--cs-m);
    width: var(--cs-m);
    flex: none;
  }

  .check {
    box-sizing: border-box;
    position: absolute;
    border-radius: 9999px;
    opacity: 0;
    transition: opacity #{var.$transitionTime};

    &[data-selected="true"] {
      opacity: 1;
    }
  }

  .content {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    height: 100%;
    flex: 1;
    transition: background-color #{var.$transitionTime},
    color #{var.$transitionTime};
  }

}