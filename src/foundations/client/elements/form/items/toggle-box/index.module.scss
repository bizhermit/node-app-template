@use "../../../../styles/mixins" as mixins;
@use "../../../../styles/var" as var;

$animationTime: 0.4s;

@layer base {

  .main {
    &[data-disabled="false"] {
      &:focus {
        @include mixins.focusOutline(var(--s-color, var(--c-border)));
      }
    }

    &[data-editable="true"] {
      >.body {
        >.box {
          background-color: var(--c-input);
        }
      }

      @include mixins.crossHover {
        >.body {
          >.handle {
            &::before {
              @include mixins.buttonHoverAnimation(var(--s-color, var(--c-border)));
            }
          }
        }

        &:active {
          >.body {
            >.handle {
              &::before {
                @include mixins.buttonHoverActive;
              }
            }
          }
        }
      }

      &[data-error="true"] {
        >.body {
          >.handle {
            &::before {
              background: var(--c-error);
            }
          }
        }
      }
    }
  }

  .body {
    box-sizing: border-box;
    position: relative;
    display: block;
    height: var(--cs-m);
    width: calc(var(--cs-m) * 1.75);

    &[data-checked="true"] {
      >.box {
        &::before {
          background-color: var(--s-color, var(--c-main));
        }
      }

      >.handle {
        left: calc(100% - var(--cs-m));
      }
    }
  }

  .box {
    box-sizing: border-box;

    &::before {
      box-sizing: border-box;
      position: absolute;
      content: "";
      top: 20%;
      left: 20%;
      width: 60%;
      height: 60%;
      border-radius: 9999px;
      border: #{var.$inputBorderWidth} solid var(--s-color, var(--c-border));
      background: inherit;
      transition: background-color #{$animationTime};
    }
  }

  .handle {
    box-sizing: border-box;
    z-index: 1;
    position: absolute;
    left: 0%;
    transition: left #{$animationTime};

    &::before {
      box-sizing: border-box;
      position: absolute;
      content: "";
      top: calc(var(--cs-m) * 0.1);
      left: calc(var(--cs-m) * 0.1);
      height: calc(var(--cs-m) * 0.8);
      width: calc(var(--cs-m) * 0.8);
      border-radius: 9999px;
      border: #{var.$inputBorderWidth} solid var(--s-color, var(--c-border));
      background: var(--c-input);
    }
  }

  .content {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    height: 100%;
    flex: 1;
    color: var(--s-color, inherit);
    transition: background-color #{var.$transitionTime},
    color #{var.$transitionTime};
    padding-right: #{var.$textPadding};
  }

  .label {
    display: inline-block;
    color: var(--s-color, inherit);
    padding-left: #{var.$textPaddingThin};
    padding-right: #{var.$textPaddingThin};
  }

}