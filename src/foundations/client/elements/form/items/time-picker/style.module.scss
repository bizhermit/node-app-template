@use "../../../../styles/mixins" as mixins;
@use "../../../../styles/var" as var;

@layer base {

  .main {
    flex-direction: column !important;
    width: calc(var(--cs-m) * 7);
    height: calc(var(--cs-m) * 7);
    border-radius: var(--radius);
    overflow: visible;
    background: var(--c-input);
    color: var(--c-input_);

    &[data-error="true"] {
      background: var(--c-error);
      color: var(--c-error_);
    }

    &[data-editable="true"] {
      >.content {
        user-select: none;

        >.list {
          @include mixins.crossHover {}

          >.cell {
            &[data-selectable="true"] {
              cursor: pointer;
              @include mixins.hoverTransition;

              @include mixins.crossHover {
                @include mixins.hover;

                &:active {
                  @include mixins.hoverActive;
                }
              }
            }

            &[data-selectable="false"] {
              cursor: not-allowed;
              opacity: 0.2;
            }
          }
        }
      }
    }
  }

  .content {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: stretch;
    align-items: stretch;
    flex: 1;
    min-height: 0;
    width: 100%;
    overflow: visible;
  }

  .list {
    box-sizing: border-box;
    display: flex;
    flex-flow: column nowrap;
    justify-content: stretch;
    align-items: stretch;
    flex: 1;
    overflow: auto;
    padding: calc(var(--cs-m) * 2.85) var(--b-xs);
    gap: var(--b-xs);
  }

  .cell {
    box-sizing: border-box;
    position: relative;
    flex: none;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    padding-top: var(--pt-t);
    line-height: calc(var(--cs-m) / 3);
    border-width: #{var.$inputBorderWidth};
    border-style: solid;
    border-color: transparent;
    border-radius: var(--radius);
    height: calc(var(--cs-m) * 0.75);
    transition: background-color #{var.$transitionTime},
    color #{var.$transitionTime};

    &[data-selected="true"] {
      color: var(--c-selected_);
      z-index: 0;

      &::before {
        $pad: 0.1rem;
        box-sizing: border-box;
        position: absolute;
        content: "";
        z-index: -1;
        top: #{$pad};
        left: #{$pad};
        height: calc(100% - $pad * 2);
        width: calc(100% - $pad * 2);
        background: var(--c-selected);
        border-radius: var(--radius);
      }
    }

    &[data-current="true"] {
      border-color: var(--c-border);
    }
  }

  .buttons {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: stretch;
    align-items: stretch;
    height: calc(var(--cs-m) * 0.8);
    flex: none;
    width: 100%;
    user-select: none;

    @include mixins.crossHover {}

    &:empty {
      display: none;
    }
  }

  .clear,
  .positive,
  .negative {
    @include mixins.inputButton(true);
  }

  @include mixins.hoverAnimation;

  .positive,
  .negative {
    flex: 1;
    font-size: var(--fs-s);
  }

  .clear {
    width: var(--cs-m);
    flex: none;
  }

}