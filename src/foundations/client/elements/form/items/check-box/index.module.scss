@use "../../../../styles/var" as var;
@use "../../../../styles/mixins" as mixins;

$checkTransitionTime: 0.1s;

@layer base {

  .main {
    &[data-disabled="false"] {
      &:focus {
        @include mixins.outline;
      }
    }

    &[data-editable="true"] {
      &[data-outline="true"] {
        outline-offset: -0.1rem;
        @include mixins.hoverTransition;

        @include mixins.crossHover {
          @include mixins.hover;

          &:active {
            @include mixins.hoverActive;
          }
        }
      }

      &:not([data-outline="true"]) {
        @include mixins.crossHover {
          .box {
            &::before {
              @include mixins.hover;
            }
          }

          &:active {
            .box {
              &::before {
                @include mixins.hoverActive;
              }
            }
          }
        }
      }

      &[data-error="true"] {
        >.body {
          >.box {
            &::before {
              background: var(--c-error);
            }
          }
        }
      }
    }

    &[data-outline="true"] {
      border: #{var.$inputBorderWidth} solid var(--c-border);
      border-radius: 9999px;

      >.body {
        &:not([data-circle="true"]) {
          &:not(:only-child) {
            margin-left: #{var.$textPadding};
          }
        }
      }
    }
  }

  @include mixins.hoverAnimation;

  .body {
    box-sizing: border-box;
    position: relative;
    display: block;
    height: var(--cs-m);
    width: var(--cs-m);

    &[data-circle="true"] {

      >.box,
      >.check {
        &::before {
          border-radius: 9999px;
        }
      }
    }
  }

  @mixin box {
    box-sizing: border-box;
    position: absolute;
    content: "";
    top: 15%;
    left: 15%;
    width: 70%;
    height: 70%;
    border-radius: var(--radius);
  }

  .box {
    box-sizing: border-box;
    z-index: 0;

    &::before {
      @include box;
      border-width: #{var.$inputBorderWidth};
      border-style: solid;
      border-color: inherit;
      @include mixins.hoverTransition;
    }

    &[data-editable="true"] {
      &::before {
        background: var(--c-input);
      }
    }
  }

  .check {
    box-sizing: border-box;
    background: transparent;
    z-index: 1;
    opacity: 0;
    transition: opacity #{$checkTransitionTime};

    &[data-checked="true"] {
      opacity: 1;
    }

    &::before {
      @include box;
      background: inherit;
    }

    &::after {
      box-sizing: border-box;
      position: absolute;
      content: "";
      top: 22%;
      left: 37%;
      width: 28%;
      height: 45%;
      border-bottom-width: 0.25rem;
      border-bottom-style: solid;
      border-bottom-color: inherit;
      border-right-width: 0.25rem;
      border-right-style: solid;
      border-right-color: inherit;
      transform: rotate(45deg);
    }
  }

  .content {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    height: 100%;
    flex: 1;
    transition: background-color #{var.$transitionTime},
    color #{var.$transitionTime};
    padding-right: #{var.$textPadding};
  }

  .label {
    display: inline-block;
    padding-left: #{var.$textPaddingThin};
    padding-right: #{var.$textPaddingThin};
  }

}