@use "../../styles/var" as var;
@use "../../styles/mixins" as mixins;

@layer base {

  .wrap {
    box-sizing: border-box;
    position: relative;
    padding: 0;
    flex: none;
    overflow: visible;
    font-family: inherit;
    background: none;
    border: none;
    border-radius: var(--radius);
    outline: none;
    max-width: 100%;
    max-height: 100%;
    user-select: none;
    text-decoration: none;
    --c: var(--s-color, var(--c-main));
    --c_: var(--s-color_, var(--c-main_));

    &:not(:is(:disabled, [aria-disabled="true"])) {
      cursor: pointer;

      &:focus {
        >.main {
          @include mixins.focusOutline(var(--c));
          outline-offset: 0.1rem;
        }
      }

      @include mixins.crossHover {
        >.main {
          @include mixins.buttonHoverAnimation(var(--c));

          &::after {
            opacity: 0.8;
          }

          &:is([data-outline="true"], [data-text="true"]) {
            &::after {
              opacity: 0.15;
            }
          }

          &:active {
            @include mixins.buttonHoverActive;
          }
        }
      }
    }

    &:is(:disabled, [aria-disabled="true"]) {
      opacity: #{var.$disabledOpacity};
    }

    &[data-round="true"] {
      border-radius: 9999px;

      >.main {
        border-radius: 9999px;
      }
    }

    @each $size in var.$sizes {
      &[data-size="#{$size}"] {
        --is: var(--is-#{$size});
        font-size: var(--fs-#{$size});
        min-width: var(--cs-#{$size});

        &[data-wide="true"] {
          min-width: calc(var(--cs-#{$size}) * 4);
        }

        >.main {
          min-height: var(--cs-#{$size});

          >.label {
            &[data-pad="true"] {
              padding-left: calc(var(--cs-#{$size}) / 2);
              padding-right: calc(var(--cs-#{$size}) / 2);
            }
          }

          >.icon {
            &:not(:only-child) {
              min-width: var(--cs-#{$size});
            }
          }
        }
      }
    }

    &[data-wide="false"] {
      width: fit-content;
    }
  }

  .main {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border-radius: var(--radius);
    height: 100%;
    width: 100%;
    color: var(--c_);

    &::after {
      box-sizing: border-box;
      position: absolute;
      content: "";
      background: var(--c);
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      transition: opacity 0.2s;
      border-radius: inherit;
      z-index: 0;
    }

    &[data-outline="true"] {
      border: 0.15rem solid var(--c);
    }

    &:is([data-outline="true"], [data-text="true"]) {
      color: var(--c);

      &::after {
        opacity: 0;
      }
    }

    &[data-icon="left"] {
      >.icon {
        order: 1;
      }

      >.label {
        padding-left: 0 !important;
        order: 2;
      }
    }

    &[data-icon="right"] {
      >.icon {
        order: 2;
      }

      >.label {
        padding-right: 0 !important;
        order: 1;
      }
    }
  }

  .label {
    box-sizing: border-box;
    text-overflow: ellipsis;
    z-index: 1;

    &[data-fill="true"] {
      flex: 1 0 0rem;
    }

    &[data-pad="true"] {
      &[data-pt="true"] {
        padding-top: var(--pt-t);
      }
    }


    &:empty {
      display: none;
    }
  }

  .icon {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    height: 100%;
    z-index: 1;

    &:only-child {
      width: 100%;
    }
  }

}