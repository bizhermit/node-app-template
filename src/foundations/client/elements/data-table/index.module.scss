@use "../../styles/var" as var;
@use "../../styles/mixins" as mixins;

$borderWidth: 0.1rem;
$borderStyle: #{$borderWidth} solid var(--c-border);

@layer base {

  .wrap {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-items: stretch;
    overflow: visible;
    row-gap: var(--b-s);
  }

  .table {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-items: stretch;
    min-height: 0;
    overflow: auto;
    border-radius: var(--radius);
    flex: 1;
    z-index: 0;

    &[data-border="true"] {
      border: #{$borderStyle};
    }

    &[data-drag-scroll="true"] {
      cursor: cell;
    }

    &:active {
      &:not([data-dragging]) {
        cursor: unset;
      }
    }
  }

  .header,
  .body {
    box-sizing: border-box;
    width: fit-content;
    min-width: 100%;
    overflow: visible;
  }

  .header {
    z-index: 1;
    position: sticky;
    top: 0;
    background-color: var(--s-color, var(--c-main));
    color: var(--s-color_, var(--c-main_));
    cursor: default;
  }

  .body {
    z-index: 0;

    &[data-scroll="true"] {
      height: 0;
    }
  }

  .hrow,
  .brow,
  .grow {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: stretch;
    background: inherit;
    color: inherit;
    z-index: 0;
    overflow: visible;

    &:not(:first-child) {
      &[data-border="true"] {
        border-top: #{$borderStyle};
      }
    }
  }

  .brow {
    background: var(--c-pure);

    &[data-stripes="true"] {
      &:nth-child(2n) {
        background: var(--c-dull);
      }
    }

    @include mixins.crossHover {
      background-color: var(--c-hover) !important;
    }

    &:has(>.radio:checked) {
      &::after {
        box-sizing: border-box;
        position: absolute;
        content: "";
        border: 0.2rem solid var(--c-border);
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        z-index: 9999;
        pointer-events: none;
      }
    }

    &[data-pointer="true"] {
      cursor: pointer;
    }
  }

  .hcell,
  .bcell {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    background: inherit;
    color: inherit;
    overflow: visible;
    z-index: 0;

    &[data-align="left"] {
      justify-content: flex-start;

      >a {
        justify-content: flex-start;
      }
    }

    &[data-align="center"] {
      justify-content: center;

      >a {
        justify-content: center;
      }
    }

    &[data-align="right"] {
      justify-content: flex-end;

      >a {
        justify-content: flex-end;
      }
    }

    &[data-sticky="true"] {
      position: sticky;

      &[data-border="true"] {
        &::after {
          box-sizing: border-box;
          position: absolute;
          content: "";
          top: 0;
          right: -#{$borderWidth};
          height: 100%;
          width: #{$borderWidth};
          background-color: var(--c-border);
        }
      }
    }
  }

  .hcell {
    user-select: none;
    font-weight: bold;
  }

  .rcell {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: stretch;
    align-items: stretch;

    >:is(.grow, .hrow, .brow) {
      flex: 1;
      max-height: 100%;
    }
  }

  .hcell,
  .bcell,
  .rcell {
    &:not(:first-child) {
      &[data-border="true"] {
        border-left: #{$borderStyle};
      }
    }
  }

  .bcell {
    >a {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      position: relative;
      display: flex;
      flex-direction: row;
      align-items: center;
      overflow: visible;
    }

    @include mixins.crossHover(false) {
      background: var(--c-selected);
    }

    &[data-pointer="true"] {
      cursor: pointer;
    }
  }

  .content {
    box-sizing: border-box;
    display: flex;
    flex-flow: row nowrap;
    justify-content: stretch;
    align-items: stretch;
    flex: 1;
  }

  .label {
    box-sizing: border-box;
    display: block;
    max-width: 100%;
    overflow: hidden;

    &[data-padding="true"] {
      padding: var(--pt-t) #{var.$textPadding} 0 #{var.$textPadding};
    }

    &[data-wrap="false"] {
      white-space: nowrap;
      text-overflow: ellipsis;
    }
  }

  .sort {
    box-sizing: border-box;
    position: relative;
    height: 100%;
    width: calc(var(--cs-m) * 0.4);
    overflow: visible;
    margin-right: calc(var(--cs-m) / 8);
    flex: none;

    &::before,
    &::after {
      box-sizing: border-box;
      position: absolute;
      content: "";
      width: 100%;
    }

    &[data-direction=""] {
      &::before {
        bottom: calc(50% + 0.2rem);
        height: calc(var(--cs-m) * 0.2);
        background: var(--c-border);
        clip-path: polygon(0% 100%, 50% 0%, 100% 100%);
      }

      &::after {
        top: calc(50% + 0.2rem);
        height: calc(var(--cs-m) * 0.2);
        background: var(--c-border);
        clip-path: polygon(0% 0%, 100% 0%, 50% 100%);
      }
    }

    &[data-direction="asc"] {
      &::before {
        top: calc(50% - (var(--cs-m) * 0.125));
        height: calc(var(--cs-m) * 0.25);
        background: var(--c-border);
        clip-path: polygon(0% 100%, 50% 0%, 100% 100%);
      }
    }

    &[data-direction="desc"] {
      &::before {
        top: calc(50% - (var(--cs-m) * 0.125));
        height: calc(var(--cs-m) * 0.25);
        background: var(--c-border);
        clip-path: polygon(0% 0%, 100% 0%, 50% 100%);
      }
    }
  }

  .empty {
    box-sizing: border-box;
    position: sticky;
    left: 0;
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    flex: 1;
    min-height: var(--cs-m);
    opacity: 0.5;
  }

  .pagination {
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    column-gap: var(--b-m);
    overflow: visible;
    z-index: 1;

    .number {
      box-sizing: border-box;
      display: flex;
      flex-flow: row nowrap;
      justify-content: center;
      align-items: center;
      padding-top: var(--pt-t);
      column-gap: var(--b-xs);
    }
  }

  .radio {
    display: none !important;
  }

  .link {
    box-sizing: border-box;
    max-height: 100%;
    max-width: 100%;
  }

}